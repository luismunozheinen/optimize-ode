using DifferentialEquations,ParameterizedFunctions,JLD2,LinearAlgebra,BenchmarkTools,DiffEqOperators,Sundials
#Model Size---------------------------------------------------------------------
const d,l = 10,20
#Initial Conditions-------------------------------------------------------------
function inverter(v,d,l)
    matrix=zeros(d,l)
    for row=1:d
        for col=1:l
            matrix[row,col]=v[(row-1)*l+col];
        end
    end
    return matrix
end
@load "./initialCondition.jld2" icRS
tmp_u0 = zeros(d,l,3)
tmp_u0[:,:,1] = inverter(icRS[1:3:end],10,20)
tmp_u0[:,:,2] = inverter(icRS[2:3:end],10,20)
tmp_u0[:,:,3] = inverter(icRS[3:3:end],10,20)
const u0 = tmp_u0
du=similar(u0)
#Parameter----------------------------------------------------------------------
@load "./parameter.jld2" parameter
const p = parameter #for Ax+f(x)
#m=1 kp=2 kc=3 ν=4 σ=5 τ0=6 L=7 A=8 B=9
#ODE Function-------------------------------------------------------------------
function f!(du,u,p,t)
   #du+dθ-----------------------------------------------------------------------
   @inbounds for i in 1:l, j in 1:d
       du[j,i,1] = @. u[j,i,2] - p[4]
       du[j,i,3] = @. p[9]*p[4]/p[7] * (exp((p[6] - u[j,i,3])/p[9]) - u[j,i,2]/p[4])
   end
   #dv--------------------------------------------------------------------------
    #inner blocks
    @inbounds for i in 2:l-1, j in 2:d-1
         du[j,i,2] = @. 1/p[1]*p[3]*(u[j,i+1,1]+u[j,i-1,1]+u[j+1,i,1]+u[j-1,i,1]-4*u[j,i,1]) - 1/p[1]*p[2]*u[j,i,1] - 1/p[1]*p[5]*p[8]*asinh(u[j,i,2]/(2*p[4])*exp(u[j,i,3]/p[8]))
    end
    #left right blocks
    @inbounds for j in 2:d-1
        #first col
        du[j,1,2] = @. 1/p[1]*p[3]*(u[j,2,1]+u[j,d,1]+u[j+1,1,1]+u[j-1,1,1]-4*u[j,1,1]) - 1/p[1]*p[2]*u[j,1,1]  - 1/p[1]*p[5]*p[8]*asinh(u[j,1,2]/(2*p[4])*exp(u[j,1,3]/p[8]))
        #right (last col)
        du[j,l,2] = @.  1/p[1]*p[3]*(u[j,l-1,1]+u[j,1,1]+u[j+1,l,1]+u[j-1,l,1]-4*u[j,l,1]) - 1/p[1]*p[2]*u[j,l,1]  - 1/p[1]*p[5]*p[8]*asinh(u[j,l,2]/(2*p[4])*exp(u[j,l,3]/p[8]))
    end
    #top bottom blocks
    @inbounds for i in 2:l-1
        #top (first row)
        du[1,i,2] = @. 1/p[1]*p[3]*(u[1,i+1,1]+u[1,i-1,1]+u[2,i,1]-3*u[1,i,1]) - 1/p[1]*p[2]*u[1,i,1] - 1/p[1]*p[5]*p[8]*asinh(u[1,i,2]/(2*p[4])*exp(u[1,i,3]/p[8]))
        #botoom (last row)
        du[d,i,2] = @. 1/p[1]*p[3]*(u[d,i+1,1]+u[d,i-1,1]+u[d-1,i,1]-3*u[d,i,1]) - 1/p[1]*p[2]*u[d,i,1] - 1/p[1]*p[5]*p[8]*asinh(u[d,i,2]/(2*p[4])*exp(u[d,i,3]/p[8]))
    end
    #Corner Blocks
     du[1,1,2] = @. 1/p[1]*p[3]*(u[1,l,1]+u[1,2,1]+u[2,1,1]-3*u[1,1,1]) - 1/p[1]*p[2]*u[1,1,1] - 1/p[1]*p[5]*p[8]*asinh(u[1,1,2]/(2*p[4])*exp(u[1,1,3]/p[8]))
     du[1,l,2] = @. 1/p[1]*p[3]*(u[1,l-1,1]+u[1,1,1]+u[2,l,1]-3*u[1,l,1]) - 1/p[1]*p[2]*u[1,l,1] - 1/p[1]*p[5]*p[8]*asinh(u[1,l,2]/(2*p[4])*exp(u[1,l,3]/p[8]))
     du[d,1,2] = @. 1/p[1]*p[3]*(u[d,2,1]+u[d,l,1]+u[d-1,1,1]-3*u[d,1,1]) - 1/p[1]*p[2]*u[d,1,1] - 1/p[1]*p[5]*p[8]*asinh(u[d,1,2]/(2*p[4])*exp(u[d,1,3]/p[8]))
     du[d,l,2] = @. 1/p[1]*p[3]*(u[d,1,1]+u[d,l-1,1]+u[d-1,l,1]-3*u[d,l,1]) - 1/p[1]*p[2]*u[d,l,1] - 1/p[1]*p[5]*p[8]*asinh(u[d,l,2]/(2*p[4])*exp(u[d,l,3]/p[8]))
end
#Time Domain
tspan=(0.0,50.0)
@benchmark f!(du,u0,p,tspan)
#ODE Setup & Solver-------------------------------------------------------------
prob = ODEProblem(f!,u0,tspan,parameter)  #set up ode problem to solve using initial conditions and timespan
@benchmark sol1 = solve(prob,Rodas5(autodiff=false),reltol=1e-6,abstol=1e-6,save_everystep=false) #solve problem and benchmark cpu requirements

#Plot Results

using Plots
gr()
#Run Function Code First
(t1,u1,v1,θ1) = extract_srcParamRS(sol1)
plot(t1,u1,label="")

function extract_srcParamRS(sol)
    t=sol.t
    u = Array{Float64}(undef,length(t),d*l)
    v = similar(u)
    θ = similar(u)
    [u[i,:] = sol.u[i][:,:,1][:] for i=1:length(t)]
    [v[i,:] = sol.u[i][:,:,2][:] for i=1:length(t)]
    [θ[i,:] = sol.u[i][:,:,3][:] for i=1:length(t)]
    [t,u,v,θ]
end
