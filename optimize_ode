#Load Differential Equations packages and related
using DifferentialEquations,ParameterizedFunctions,JLD2,LinearAlgebra,BenchmarkTools,DiffEqOperators,Sundials
#Load local files (matrix A and written-out ode function frs!)
using setup_A_matrix
using setup_ode_def

#Load initial Condition
@load "./initialCondition.jld2" icRS
u0=icRS
u=similar(u0)

#Spatial Domain (length & depth)
l=20;d=10

#Model Parameters
@load "./parameter.jld2" parameter
const p = parameter #for Ax+f(x)
const p2 = parameter.*[1,ones(d*l),ones(d*l),1,ones(d*l),1,1,ones(d*l),ones(d*l)] #for written-out fct
#Load A matrix for linear interactions in Ax + f(x)
const A = create_matrix(p)

#Friction Forces
#V1----------------------------------------------------------------------------
function friction!(f,u,p,t)
    @inbounds for i=1:3:length(f)
        f[i] =   @. - p[4]
        f[i+1] = @. -1/p[1]*(p[5]*p[8] * asinh(u[i+1]/(2*p[4]) * exp(u[i+2]/p[8])))
        f[i+2] = @. p[9]*p[4]/p[7] * (exp.((p[6]-u[i+2])/p[9]) - u[i+1]/p[4])
    end
    return f
end
#V2-----------------------------------------------------------------------------
const array_u = [(i+2) % 3.0 == 0.0 ? 1.0::Float64 : 0.0::Float64  for i=1:d*l*3]
const array_v = [(i+1) % 3.0 == 0.0 ? 1.0::Float64 : 0.0::Float64  for i=1:d*l*3]
const array_θ = [i % 3.0 == 0.0 ? 1.0::Float64 : 0.0::Float64  for i=1:d*l*3]

function friction2!(du,u,p,t)
    du .= @. -p[4] .* array_u  + p[5]*p[8] .* asinh.(u ./(2*p[4]) .* exp.(u ./p[8])) .*array_v +  (p[9]*p[4]/p[7] .*(exp.((p[6] .-u) ./p[9]) .- u ./p[4])) .*array_θ
end
#For Allocation Checks per function call run code below
#@benchmark friction!(u,u0,p,tspan)
#@time friction2!(u,u0,p,tspan)

#-------------------------------------------------------------------------------
#ODE Functions------------------------------------------------------------------
const tmp1 = similar(u0)
const tmp2 = similar(u0)

function f(du,u,p,t)
  mul!(tmp1,A,u)
  friction!(tmp2,u,p,t)
  du .= @. tmp1 + tmp2
end
#-------------------------------------------------------------------------------
#Solver-------------------------------------------------------------------------
#Time domain over which ode is solved
tspan=(0.0,10.0)
#Ax+f(x)________________________________
prob = ODEProblem(f,u0,tspan,parameter)  #set up ode problem to solve using initial conditions and timespan
@benchmark sol1 = solve(prob,Rodas5(autodiff=false),reltol=1e-6,abstol=1e-6,save_everystep=false,saveat=1.0,progress=true); #solve problem and benchmark cpu requirements
@benchmark sol2 = solve(prob,CVODE_BDF(linear_solver=:GMRES),reltol=1e-6,abstol=1e-6,save_everystep=false,saveat=1.0,progress=true); #solve problem and benchmark cpu requirements
@benchmark sol3 = solve(prob,ARKODE(linear_solver=:GMRES),reltol=1e-6,abstol=1e-6,save_everystep=false,saveat=1.0,progress=true); #solve problem and benchmark cpu requirements
#dui=...(written out form)______________
prob = ODEProblem(frs!,u0,tspan,p2) #set up ode problem to solve using initial conditions and timespan
@benchmark sol4 = solve(prob,Rodas5(),reltol=1e-6,abstol=1e-6,force_dtmin=true,maxiters=10^14,save_everystep=false,saveat=1.0) #Solver

#Split Ode----------------------------------------------------------------------
tspan=(0.0,50.0)
f1(du,u,p,t)=mul!(du,A,u)
f0(du,u,p,t)=friction!(du,u,p,t)
prob = SplitODEProblem(f1,f0,u0,tspan,p)
@benchmark sol5 = solve(prob,Rodas5(autodiff=false),reltol=1e-6,abstol=1e-6,save_everystep=false,saveat=1.0,progress=true) #solve problem and benchmark cpu requirements
@benchmark sol6 = solve(prob,ARKODE(linear_solver=:GMRES),reltol=1e-6,abstol=1e-6,save_everystep=false,saveat=1.0,progress=true) #solve problem and benchmark cpu requirements
@benchmark sol7 = solve(prob,CVODE_BDF(linear_solver=:GMRES),reltol=1e-6,abstol=1e-6,save_everystep=false,saveat=1.0,progress=true); #solve problem and benchmark cpu requirements
@time sol8 = solve(prob,KenCarp4(linsolve=LinSolveGMRES()),reltol=1e-6,abstol=1e-6,save_everystep=false,saveat=1.0,progress=true); #solve problem and benchmark cpu requirements

#Extract u_i,v_i,θ_i from solution "sol_i"

function extract_srcParamRS(sol)
    t=sol.t
    dof=3
    temp=[y[i] for y in sol.u, i in 1:dof*l*d]
    x=temp[:,1:dof:end]
    vx=temp[:,2:dof:end]
    θ=temp[:,3:dof:end]
    [t,x,vx,θ]
end

#Plot results for comparison and numerical accuracy checks
using Plots
gr() #plot backend
(t1,u1,v1,θ1)=extract_srcParamRS(sol1)
(t2,u2,v2,θ2)=extract_srcParamRS(sol2)
(t3,u3,v3,θ3)=extract_srcParamRS(sol3)
#...
plot(t2,u1-u2,label="") #check difference in position
plot(t2,u2,label="") #plot position
plot(t1,u1,label="") #plot position
